# app/database.py

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
import asyncio
from .ai_services import get_ai_chat_completion
from datetime import datetime, timedelta, timezone

from . import config
from .ai_services import get_ai_chat_completion # ai_services.py에서 함수 import

# SQLAlchemy 엔진 및 세션 설정
engine = None

def init_db():
    global engine
    try:
        server_engine = create_engine(config.SERVER_DATABASE_URL)
        with server_engine.connect() as connection:
            connection.execute(text(f"CREATE DATABASE IF NOT EXISTS {config.DB_NAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"))
        
        engine = create_engine(config.DATABASE_URL)
        with engine.connect() as connection:
            connection.execute(text("""
            CREATE TABLE IF NOT EXISTS conversations (...);
            """)) # SQL 구문은 이전과 동일하므로 간결화를 위해 생략
            connection.execute(text("""
            CREATE TABLE IF NOT EXISTS summaries (...);
            """)) # SQL 구문은 이전과 동일하므로 간결화를 위해 생략
        print("✅ MySQL 데이터베이스 및 테이블이 성공적으로 준비되었습니다.")
        return True
    except Exception as e:
        print(f"❌ 데이터베이스 설정 중 오류 발생: {e}")
        return False

SessionLocal = None
if init_db():
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
else:
    exit("데이터베이스 연결 실패로 서버를 시작할 수 없습니다.")

async def save_conversation_to_mysql(user_id: str, user_message: str, ai_message: str):
    db = SessionLocal()
    try:
        query = text("INSERT INTO conversations (user_id, user_message, ai_message) VALUES (:user_id, :user_message, :ai_message)")
        await asyncio.to_thread(db.execute, query, {"user_id": user_id, "user_message": user_message, "ai_message": ai_message})
        await asyncio.to_thread(db.commit)
    finally:
        db.close()

async def create_hourly_summary_report(user_id: str):
    """
    마지막 리포트 생성 후 1시간이 지났고, 새로운 대화가 있을 경우에만
    시간별 요약 리포트를 생성합니다. (UTC 시간 기준)
    """
    print(f"🗓️ [{user_id}] 님의 시간별 리포트 생성 여부를 확인합니다.")
    db = SessionLocal()
    try:
        # 1. 이 사용자의 가장 최근 리포트 생성 시간을 가져옵니다.
        last_summary_query = text("SELECT created_at FROM summaries WHERE user_id = :user_id ORDER BY created_at DESC LIMIT 1")
        last_summary_time = db.execute(last_summary_query, {"user_id": user_id}).scalar_one_or_none()

        # ✅ [수정] 현재 시간을 '시간대 정보가 포함된' UTC 기준으로 명확하게 가져옵니다.
        utc_now = datetime.now(timezone.utc)
        one_hour_ago = utc_now - timedelta(hours=1)

        if last_summary_time:
            # ✅ [수정] 데이터베이스에서 가져온 시간도 UTC 기준으로 만들어 비교하여 시간대 문제를 해결합니다.
            if last_summary_time.tzinfo is None:
                last_summary_time = last_summary_time.replace(tzinfo=timezone.utc)

            if last_summary_time > one_hour_ago:
                print(f"-> 마지막 리포트 생성({last_summary_time.strftime('%H:%M')} UTC) 후 1시간이 지나지 않아, 생성을 건너뜁니다.")
                return

        # 마지막 리포트가 없거나, 1시간이 지났으면 아래 로직 실행
        start_time = last_summary_time or datetime.min
        new_conv_query = text("SELECT user_message, ai_message FROM conversations WHERE user_id = :user_id AND created_at > :start_time")
        new_conversations = db.execute(new_conv_query, {"user_id": user_id, "start_time": start_time}).fetchall()

        if not new_conversations:
            print("-> 리포트에 추가할 새로운 대화 내용이 없습니다.")
            return

        print(f"-> 새로운 대화 {len(new_conversations)}건을 바탕으로 시간별 리포트를 생성합니다.")
        conversation_history = "\n".join([f"사용자: {row[0]}\nAI: {row[1]}" for row in new_conversations])
        report_prompt = f"다음은 사용자의 최근 대화 내용입니다. 이 내용을 바탕으로 사용자의 상태와 주요 대화 내용을 요약하는 '시간별 리포트'를 작성해주세요.\n\n--- 대화 내용 ---\n{conversation_history}\n-----------------\n\n시간별 리포트:"
        
        report_text = await get_ai_chat_completion(report_prompt)
        
        summary_save_query = text("INSERT INTO summaries (user_id, summary_text) VALUES (:user_id, :summary_text)")
        db.execute(summary_save_query, {"user_id": user_id, "summary_text": report_text})
        db.commit()
        print(f"✅ [{user_id}] 님의 시간별 리포트가 MySQL summaries 테이블에 저장되었습니다.")

    finally:
        db.close()